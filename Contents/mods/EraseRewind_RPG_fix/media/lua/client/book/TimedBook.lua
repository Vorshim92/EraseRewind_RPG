---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 07/10/23 12:34
---

---@class TimedBook

local TimedBook = {}

local activityCalendar = require("lib/ActivityCalendar")
local characterManagement = require("character/CharacterManagement")
local errHandler = require("lib/ErrHandler")
local pageBook = require("book/PageBook")
local modDataManager = require("lib/ModDataManager")

--- **Minimum Days Before Write Book, from sandBox**
---@return int
local function getMinimumDaysBeforeWriteBook()
    return SandboxVars.EraseRewindRPG.SetDays
end

--- **Scheduled Book Read From Hd**
---@return table double ( dateInSecond )
local function scheduledBookReadFromHd()
    return modDataManager.read(pageBook.Character.TIMED_BOOK)
end

--- **Get Book Write Date** - Get the date in seconds when it is possible to write a book
---@return double seconds
function TimedBook.getBookWriteDate()
    --- **Set Waiting Days**
    activityCalendar.setWaitingOfDays( getMinimumDaysBeforeWriteBook() )

    --- **Get Expected Date In Seconds**
    return activityCalendar.getExpectedDateInSecond()
end

--- **Read Book**
---@param character IsoGameCharacter
---@return void
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function TimedBook.readBook(character)
    if not character then
        errHandler.errMsg("TimedBook.readBook(character)",
                errHandler.err.IS_NULL_CHARACTER)
        return nil
    end

    if not modDataManager.isExists(pageBook.Character.TIMED_BOOK) then
        errHandler.errMsg("TimedBook.readBook(character)",
                " mod-data - " .. pageBook.Character.TIMED_BOOK .. " is not exists")
        return nil
    end

    characterManagement.readBook(character, pageBook.Character.TimedBook)
end

--- **Write Book To Hd**
---@param character IsoGameCharacter
---@return boolean
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function TimedBook.writeBook(character)
    --- **Check if character is nil**
    if not character then
        errHandler.errMsg("TimedBook.writeBook(character)",
                errHandler.err.IS_NULL_CHARACTER)
        return nil
    end

    ---@type boolean
    local flag = false

    --- **Book Write Date In Seconds**
    ---@type int
    local bookWriteDateInSeconds = 0

    --- **Check if scheduledBookRead is exits**
    if not modDataManager.isExists(
            pageBook.Character.TIMED_BOOK) then

        bookWriteDateInSeconds = TimedBook.getBookWriteDate()
        flag = true
    else
        --- **Retrieve the date when it is possible to write a book**
        ---@type table - double
        local scheduledBookRead = scheduledBookReadFromHd()

        --- check if scheduledBookRead is nil
        if not scheduledBookRead then return nil end

        bookWriteDateInSeconds = scheduledBookRead[1]

        -- **Set scheduled writeBook**
        activityCalendar.setExpectedDateInSecond(bookWriteDateInSeconds)

        --- **Check if date is expected**
        if activityCalendar.isExpectedDate() then
            --- **Remove all mod data**
            characterManagement.removeAllModData(pageBook.Character.TIMED_BOOK)

            --- **Book Write Date In Seconds**
            bookWriteDateInSeconds = TimedBook.getBookWriteDate()
            flag = true
        end

    end

    --- **Check if I can write the book**
    if flag then
        local lines = {}
        table.insert(lines, bookWriteDateInSeconds)
        --- **Remove scheduled BookRead date to mod data**
        modDataManager.remove(pageBook.Character.TIMED_BOOK)

        --- **Save scheduled BookRead date to mod data**
        modDataManager.save(pageBook.Character.TIMED_BOOK, lines)

        --- **Write Book**
        characterManagement.writeBook(character, pageBook.Character.TimedBook)
    end

    return flag
end

return TimedBook