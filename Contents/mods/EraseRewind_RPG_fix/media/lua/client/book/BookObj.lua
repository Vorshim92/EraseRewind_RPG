---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 12/10/23 16:51
---

require "TimedActions/ISReadABook"

local debugDiagnostics = require("lib/DebugDiagnostics")
local chooseBook = require("book/ChooseBook")
local errHandler = require("lib/ErrHandler")
local inventoryItemPZ = require("lib/InventoryItemPZ")
local readOnceBook = require("book/ReadOnceBook")
local timedBook = require("book/TimedBook")

--- **Get waiting time to read a book**
---@return float seconds
local function getWaitingTime()
    ---@type number
    local maxTime = SandboxVars.EraseRewindRPG.SetTimeOfReadBook
    --- **convert to seconds, maxTime 1 * 46 = about 1 second**
    maxTime = maxTime * 46
    return maxTime
end

---@type ISReadABook
--- - ISReadABook : TimedActions.ISBaseTimedAction
local ER_OVER_WRITE_ISReadABook_start = ISReadABook.start

---@type ISReadABook
--- - ISReadABook : TimedActions.ISBaseTimedAction
local ER_OVER_WRITE_ISReadABook_perform = ISReadABook.perform

---@type ISReadABook
--- - ISReadABook : TimedActions.ISBaseTimedAction
local ER_OVER_WRITE_ISReadABook_new = ISReadABook.new

--- **Action Start**
---@return void
function ISReadABook:start()
    --@type Literature
    local item = self.item

    --- **Check if item is a book**
    if not chooseBook.isBook(item) then
        ER_OVER_WRITE_ISReadABook_start(self)
    end
end

--- **Action End**
---@return void
function ISReadABook:perform()
    ---@type Literature | InventoryItem
    local item = self.item
    ---@type string
    local readOnceBook_ = "ReadOnceBook"
    ---@type string
    local timedBook_ = "TimedBook"

    if not chooseBook.isBook(item) then
        ER_OVER_WRITE_ISReadABook_perform(self)
    else
        --- **Check if book is correct**
        if chooseBook.isCorrectBook(item, readOnceBook_) then

            --- **Load mod-data from readOnceBook - Character stats**
            readOnceBook.readBook(debugDiagnostics.characterUpdate())

            --- **Check if book is correct**
        elseif chooseBook.isCorrectBook(item, timedBook_) then

            --- **Load mod-data from TimeBookRead - Character stats**
            timedBook.readBook(debugDiagnostics.characterUpdate())
        end

        --- **Update all the characteristics of the character**
        ---@type IsoGameCharacter
        local character = debugDiagnostics.characterUpdate()

        --- **Remove item**
        inventoryItemPZ.removeItem(character, item)

    end

    ISBaseTimedAction.perform(self)
end

--- **Action Init**
---@param character IsoGameCharacter
---@param item InventoryItem
---@param time float
---@return ISReadABook
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - InventoryItem : zombie.inventory.InventoryItem
function ISReadABook:new(character, item, time)
    if not character then
        errHandler.errMsg("ISReadABook:new(character, item, time)",
                errHandler.err.IS_NULL_CHARACTERS)
        return nil
    end

    --- **Check if item is null**
    if not item then
        errHandler.errMsg("ISReadABook:new(character, item, time)",
                "item " .. errHandler.err.IS_NULL)
        return nil
    end

    ---@type string
    local openBook = "OpenBook"

    ---@type string
    local closeBook = "CloseBook"

    --- **Create a new instance of ISReadABook**
    ---@type ISReadABook
    local er_OverWrite = ER_OVER_WRITE_ISReadABook_new(self, character, item, time)

    if chooseBook.isBook(item) then
        character:playSound(openBook)

        er_OverWrite.loopedAction = false
        er_OverWrite.useProgressBar = false
        er_OverWrite.maxTime = getWaitingTime()

        er_OverWrite.stopOnWalk = false
        character:playSound(closeBook)
    end

    return er_OverWrite
end