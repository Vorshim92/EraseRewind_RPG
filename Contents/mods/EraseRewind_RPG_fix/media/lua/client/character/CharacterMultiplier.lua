---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 15/04/23 18:54
---

---@class CharacterMultiplier

local CharacterMultiplier = {}

require("lib/CharacterBaseObj")

local characterLib = require("CharacterLib")
local characterPz = require("lib/CharacterPZ")
local errHandler = require("lib/ErrHandler")
-- local pageBook = require("book/PageBook")
local modDataManager = require("lib/ModDataManager")


-- @param perk PerkFactory.Perk
-- @param multiplier float
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactor
local lines_ = {}

---@param perk PerkFactory.Perk
---@param multiplier float
---@return table perk, double ( multiplier )
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
local function addLine(perk, multiplier)
    table.insert(lines_, {
        ---@type PerkFactory.Perk
        perk = perk,

        ---@type double
        multiplier = multiplier
    })
end

--- **Read Multiplier From Hd**
---@return table perk, double ( multiplier )
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
local function readMultiplierFromHd(modData_name)
    return modDataManager.read(modData_name.MULTIPLIER)
end

--- **Delete Multiplier**
---@param character IsoGameCharacter
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
local function deleteMultiplier(character)
    -- @type CharacterBaseObj
    local CharacterMultiplierObJ = characterLib.getAllPerks(character)

    -- @param character IsoGameCharacter
    -- @param perk PerkFactory.Perk
    for _, v in pairs(CharacterMultiplierObJ:getPerkDetails()) do
        characterPz.removeMultiplier(character, v:getPerk())
    end
end

--- **Create Multiplier**
---@param character IsoGameCharacter
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function CharacterMultiplier.readBook(character, modData_name)
    --- **Check if character is null**
    if not character then
        errHandler.errMsg("CharacterMultiplier.readBook(character)",
                errHandler.err.IS_NULL_CHARACTERS)
        return nil
        --- **Check if mod-data multiplier is exits**
    elseif not modDataManager.isExists(modData_name.MULTIPLIER) then
        errHandler.errMsg("CharacterMultiplier.readBook(character)",
                " mod-data " .. modData_name.MULTIPLIER .. " not exists")
        return nil
    end

    ---@type table
    ---@return table perk, double ( multiplier )
    local multiplier = readMultiplierFromHd(modData_name)

    if not multiplier then
        return nil
    end

    deleteMultiplier(character)

    -- @param character IsoGameCharacter
    -- @param perk PerkFactory.Perk
    -- @param multiplier float
    for _, v in pairs(multiplier) do
        characterPz.addXpMultiplier_PZ(character, v.perk, v.multiplier,
            characterPz.EnumNumbers.ONE, characterPz.EnumNumbers.ONE)
    end
end

--- **Write Trait To Hd**
---@param character IsoGameCharacter
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function CharacterMultiplier.writeBook(character, modData_name)
    --- **Check if character is null**
    if not character then
        errHandler.errMsg("CharacterMultiplier.writeBook(character)",
                errHandler.err.IS_NULL_CHARACTERS)
        return nil
    end

    --- **Remove Multiplier form mod-data**
    modDataManager.remove(modData_name.MULTIPLIER)

    -- @type CharacterBaseObj
    local CharacterMultiplierObJ = characterLib.getMultiplier(character)

    -- @param perk PerkFactory.Perk
    -- @param level int
    -- @param multiplier float
    for _, v in pairs(CharacterMultiplierObJ:getPerkDetails()) do
        if v:getMultiplier()  > 0.0 then
            addLine(v:getPerk(), v:getMultiplier())
        end
    end

    --- **Save Multiplier to mod-data**
    modDataManager.save(modData_name.MULTIPLIER, lines_)

    lines_ = {}
end

return CharacterMultiplier